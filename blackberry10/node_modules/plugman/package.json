{
  "author": {
    "name": "Andrew Lunny",
    "email": "alunny@gmail.com"
  },
  "name": "plugman",
  "description": "install/uninstall Cordova plugins",
  "version": "0.5.8",
  "repository": {
    "type": "git",
    "url": "git://git-wip-us.apache.org/repos/asf/cordova-plugman.git"
  },
  "main": "plugman.js",
  "engines": {
    "node": ">=0.6.7"
  },
  "dependencies": {
    "nopt": "1.0.x",
    "glob": "3.0.x",
    "elementtree": "0.1.x",
    "xcode": "git+https://github.com/imhotep/node-xcode.git",
    "plist": "0.4.x",
    "bplist-parser": "0.0.x",
    "shelljs": "0.1.x",
    "osenv": "0.0.x"
  },
  "devDependencies": {
    "jasmine-node": "1.7.0"
  },
  "bin": {
    "plugman": "./main.js"
  },
  "scripts": {
    "test": "./node_modules/jasmine-node/bin/jasmine-node --color spec"
  },
  "contributors": [
    {
      "name": "Anis Kadri"
    },
    {
      "name": "Tim Kim"
    },
    {
      "name": "Braden Shepherdson"
    },
    {
      "name": "Ryan Willoughby"
    },
    {
      "name": "Brett Rudd"
    },
    {
      "name": "Mike Reinstein"
    },
    {
      "name": "Shazron Abdullah"
    },
    {
      "name": "Fil Maj"
    }
  ],
  "readme": "# plugman\n\nA command line tool to distribute and package plugins for use with Apache Cordova, nee PhoneGap.\n\nThis document defines tool usage and the plugin format specification.\n\n\n## Design Goals\n\n* Facilitate programmatic installation and manipulation of plugins\n* Detail the dependencies and components of individual plugins\n* Allow code reuse between different target platforms\n\n\n## Usage\n\n    plugman --fetch --plugin <directory|git-url|name> [--plugins_dir <directory>]\n    plugman --install --platform <ios|android|bb10> --project <directory> --plugin <name> [--plugins_dir <directory>]\n    plugman --uninstall --platform <ios|android|bb10> --project <directory> --plugin <name> [--plugins_dir <directory>]\n    plugman --remove --plugin <name> [--plugins_dir <directory>]\n    plugman --list [--plugins_dir <directory>]\n    plugman --prepare --platform <ios|android|bb10> --project <directory> [--plugins_dir <directory>]\n\n* `--fetch`: Retrieves and stores a plugin\n* `--install`: Installs an already-`--fetch`'ed plugin into a cordova project\n* `--uninstall`: Uninstalls an already-`--install`'ed plugin from a cordova project\n* `--remove`: Removes a `--fetch`'ed plugin\n* `--list`: Lists all `--fetch`'ed plugins\n* `--prepare`: Based on all installed plugins, will set up properly injecting plugin JavaScript code and setting up permissions properly. Implicitly called after `--install` and `--uninstall` commands. See below for more details.\n\n`--plugins_dir` defaults to `<project>/cordova/plugins`, but can be any directory containing a subdirectory for each fetched plugin\n\nNote that `--fetch` and `--remove` deal with the local cache of the plugin's files and don't care about platforms, while `--install` and `--uninstall` require specifying the target platform and the location of the project, and actually do installation of plugin code and assets.\n\n\n### Supported Platforms\n\n* iOS\n* Android\n* BB10\n\n### Example Plugins\n\nThe plugins found [https://github.com/MobileChromeApps/chrome-cordova/plugins](here) are maintained actively by a contributor to plugman, and should serve as good examples.\n\n## Development\n\nBasic installation:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install -g\n\nLinking the global executable to the git repo:\n\n    git clone https://git-wip-us.apache.org/repos/asf/cordova-plugman.git\n    cd cordova-plugman\n    npm install\n    sudo npm link\n\n## Plugin Directory Structure\n\nA plugin is typically a combination of some web/www code, and some native code.\nHowever, plugins may have only one of these things - a plugin could be a single\nJavaScript file, or some native code with no corresponding JavaScript.\n\nHere is a sample plugin named foo with android and ios platforms support, and 2 www assets.\n\n```\nfoo-plugin/\n|- plugin.xml     # xml-based manifest\n|- src/           # native source for each platform\n|  |- android/\n|  |  `- Foo.java\n|  `- ios/\n|     |- CDVFoo.h\n|     `- CDVFoo.m\n|- README.md\n`- www/\n   |- foo.js\n   `- foo.png\n```\n\nThis structure is suggested, but not required.\n\n## plugin.xml Manifest Format\n\nLast edited April 17 2013.\n\nThe `plugin.xml` file is an XML document in the plugins namespace -\n`http://apache.org/cordova/ns/plugins/1.0`. It contains a top-level `plugin`\nelement defining the plugin, and children that define the structure of the\nplugin.\n\nA sample plugin element:\n\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <plugin xmlns=\"http://apache.org/cordova/ns/plugins/1.0\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        id=\"com.alunny.foo\"\n        version=\"1.0.2\">\n\n\n### &lt;plugin&gt; element\n\nThe `plugin` element is the top-level element of the plugin manifest. It has the\nfollowing attributes:\n\n#### xmlns (required)\n\nThe plugin namespace - `http://apache.org/cordova/ns/plugins/1.0`. If the document\ncontains XML from other namespaces - for example, tags to be added to the\nAndroidManifest.xml file - those namespaces should also be included in the\ntop-level element.\n\n#### id (required)\n\nA reverse-domain style identifier for the plugin - for example, `com.alunny.foo`\n\n#### version (required)\n\nA version number for the plugin, that matches the following major-minor-patch\nstyle regular expression:\n\n    ^\\d+[.]\\d+[.]\\d+$\n\n### &lt;engines&gt; and &lt;engine&gt; elements\n\nThe child elements of the `<engines>` element specify versions of\nApache Cordova-based frameworks that this plugin supports. An example:\n\n    <engines>\n        <engine name=\"cordova\" version=\"1.7.0\" />\n        <engine name=\"cordova\" version=\"1.8.1\" />\n        <engine name=\"worklight\" version=\"1.0.0\" />\n    </engines>\n\nSimilarly to the `version` attribute for the `<plugin>` element,\nthe version string specified should match a major-minor-patch string\nconforming to the regular expression:\n\n    ^\\d+[.]\\d+[.]\\d+$\n\nEngine elements may also have fuzzy matches to avoid repetition, and reduce\nmaintenance when the underlying platform is updated. A minimum of `>`, `>=`,\n`<` and `<=` should be supported by tools, such as:\n\n    <engines>\n        <engine name=\"cordova\" version=\">=1.7.0\" />\n        <engine name=\"cordova\" version=\"<1.8.1\" />\n    </engines>\n\nplugman will abort plugin installation if the target project does not meet the engine constraints, and exit with a non-zero code.\n\nIf no `<engine>` tags are specified, plugman will attempt to install into the specified cordova project directory blindly.\n\n### &lt;name&gt; element\n\nA human-readable name for the plugin. The text content of the element contains\nthe name of the plugin. An example:\n\n    <name>Foo</name>\n\nThis element does not (yet) handle localization.\n\n### &lt;asset&gt; element\n\nOne or more elements listing the files or directories to be copied into a\nCordova app's `www` directory. A couple of samples:\n\n    <!-- a single file, to be copied in the root directory -->\n    <asset src=\"www/foo.js\" target=\"foo.js\" />\n    <!-- a directory, also to be copied in the root directory -->\n    <asset src=\"www/foo\" target=\"foo\" />\n\nAll assets tags require both a `src` attribute and a `target` attribute.\n\nWeb-only plugins would contains mainly &lt;asset&gt; elements.\n\n#### src (required)\n\nWhere the file or directory is located in the plugin package, relative to the\n`plugin.xml` document.\n\nIf a file does not exist at the source location, plugman will stop/reverse the installation process and notify the user, and exit with a non-zero code.\n\n#### target (required)\n\nWhere the file or directory should be located in the Cordova app, relative to\nthe `www` directory.\n\nAssets can be targeted to subdirectories - for instance:\n\n    <asset src=\"www/new-foo.js\" target=\"js/experimental/foo.js\" />\n\nwould create the `js/experimental` directory in the `www` directory, if not\npresent, and then copy the file `new-foo.js` as `foo.js` into that directory.\n\nIf a file exists at the target location, plugman will stop/reverse the installation process and notify the user of the conflict, and exit with a non-zero code.\n\n### `&lt;js-module&gt;` element \n\nA typical plugin includes one or more JavaScript files. Rather than have the user of your plugin add `<script>` tags for your JavaScript to their HTML file(s) manually, you should use `<js-module>` tags for your Javascript files.\n\n`<asset>` tags are a dumb copy: copy a file from the plugin subdirectory to `www`.\n\nIn contrast, `<js-module>` tags are much more sophisticated. They look like this:\n\n    <js-module src=\"socket.js\" name=\"Socket\">\n        <clobbers target=\"chrome.socket\" />\n    </js-module>\n\nWith the above example, a call to `plugman --prepare` will copy socket.js to `www/plugins/my.plugin.id/socket.js`. Further, it will add an entry for this plugin to `www/cordova_plugins.json`. At load time, code in `cordova.js` will use an XHR to read this file, inject a `<script>` tag for each Javascript file, and add a mapping to clobber or merge as appropriate (see below).\n\nDO NOT wrap the file with `cordova.define`; this will be added automatically. Your module will be wrapped in a closure, and will have `module`, `exports` and `require` in scope, as normal for AMD modules.\n\nDetails for the `<js-module>` tag:\n\n* The `src` points to a file in the plugin directory relative to the `plugin.xml` file.\n* The `name` gives the last part of the module name. It can generally be whatever you like, and it only matters if you want to use `cordova.require` to import other parts of your plugins in your JavaScript code. The module name for a `<js-module>` is your plugin's `id` followed by the value of `name`. For the example above, with an `id` of `chrome.socket`, the module name is `chrome.socket.Socket`.\n* Inside the `<js-module>` tag there are three legal sub-tags:\n    * `<clobbers target=\"some.value\" />` indicates that the `module.exports` will be inserted into the `window` object as `window.some.value`. You can have as many `<clobbers>` as you like. If the object(s) does not exist on `window`, they will be created.\n    * `<merges target=\"some.value\" />` indicates that your module should be merged with any existing value at `window.some.value`. If any key already exists, you module's version overrides the original. You can have as many `<merges>` as you like. If the object(s) does not exist on `window`, they will be created.\n    * `<runs />` means that your code should be `cordova.require`d, but not installed on the `window` object anywhere. This is useful for initializing the module, attaching event handlers or otherwise. You can only have 0 or 1 `<runs />` tags. Note that including a `<runs />` with `<clobbers />` or `<merges />` is redundant, since they also `cordova.require` your module.\n    * An empty `<js-module>` will still be loaded and can be `cordova.require`d in other modules.\n\nIf `src` does not resolve to a file that can be found, plugman will stop/reverse the installation, notify the user of the problem and exit with a non-zero code.\n\n\n### &lt;platform&gt;\n\nPlatform tags identify platforms that have associated native code and/or require configuration file modifications. Tools using\nthis specification can identify supported platforms and install the code into\nCordova projects.\n\nPlugins without `<platform>` tags are assumed to be JS-only, and therefore installable on any and all platforms.\n\nA sample platform tag:\n\n    <platform name=\"android\">\n    <!-- android specific elements -->\n    </platform>\n    <platform name=\"ios\">\n    <!-- ios specific elements -->\n    </platform>\n\n#### name (required)\n\nThe `name` attribute identifies a platform as supported - it also associates the\nelement's children with that platform.\n\nPlatform names should be all-lowercase. Platform names, as arbitrarily chosen,\nare listed:\n\n* android\n* bb10\n* ios\n* wp7\n* wp8\n* windows8\n\n\n### &lt;source-file&gt;\n\n`source-file` elements identify executable source code that should be installed\ninto a project. A couple of examples:\n\n    <!-- android -->\n    <source-file src=\"src/android/Foo.java\"\n                    target-dir=\"src/com/alunny/foo\" />\n    <!-- ios -->\n    <source-file src=\"CDVFoo.m\" />\n\n\n#### src (required)\n\nWhere the file is located, relative to the `plugin.xml` file.\n\nIf `src` does not resolve to a file that can be found, plugman will stop/reverse the installation, notify the user of the problem and exit with a non-zero code.\n\n#### target-dir\n\nA directory where the files should be copied into, relative to the root of the\nCordova project.\n\nIn practice, this is most important for Java-based platforms, where a file in\nthe package `com.alunny.foo` has be located under the directory\n`com/alunny/foo`. For platforms where the source directory is not important,\nplugin authors should omit this attribute.\n\nAs with assets, if a `source-file`'s `target` would overwrite an existing file, plugman will stop/reverse the installation, notify the user rnd exit with a non-zero code.\n\n### &lt;config-file&gt;\n\nIdentifies an XML-based configuration file to be modified, where in that\ndocument the modification should take place, and what should be modified.\n\nThe `config-file` element only allows for appending\nnew children into an XML document. The children are XML literals that are the\nto be inserted in the target document.\n\nExample:\n\n    <config-file target=\"AndroidManifest.xml\" parent=\"/manifest/application\">\n        <activity android:name=\"com.foo.Foo\"\n                  android:label=\"@string/app_name\">\n                  <intent-filter>\n                  </intent-filter>\n        </activity>\n    </config-file>\n\n#### target\n\nThe file to be modified, and the path relative to the root of the Cordova\nproject.\n\nIf this file does not exist, the tool should stop/reverse the installation process, warn the user, and exit with a non-zero code.\n\n#### parent\n\nAn absolute XPath selector pointing to the parent of the elements to be added to\nthe config file.\n\nIf the selector does not resolve to a child of the specified document, the tool should stop/reverse the installation process, warn the user, and exit with a non-zero code.\n\n### &lt;plugins-plist&gt;\n\nThis is OUTDATED as it only applies to cordova-ios 2.2.0 and below. Use &lt;config-file&gt; tag (same as Android) for newer versions of Cordova.\n\nExample:\n\n    <config-file target=\"config.xml\" parent=\"/cordova/plugins\">\n         <plugin name=\"ChildBrowser\"\n             value=\"ChildBrowserCommand\"/>\n    </config-file>\n\nSpecifies a key and value to append to the correct `AppInfo.plist` file in an\niOS Cordova project. Example:\n\n    <plugins-plist key=\"Foo\"\n                   string=\"CDVFoo\" />\n\n\n### &lt;resource-file&gt; and &lt;header-file&gt;\n\nLike source files, but specifically for platforms that distinguish between\nsource files, headers, and resources (iOS)\n\nExamples:\n\n    <resource-file src=\"CDVFoo.bundle\" />\n    <resource-file src=\"CDVFooViewController.xib\" />\n    <header-file src=\"CDVFoo.h\" />\n\n### &lt;framework&gt;\n\nIdentifies a framework (usually part of the OS/platform) that the plugin depends on.\n\nExamples:\n\n    <framework src=\"libsqlite3.dylib\" />\n    <framework src=\"social.framework\" weak=\"true\" />\n\nplugman identifies the framework through the `src` attribute and attempts to add the framework to the Cordova project, in the correct fashion for a given platform.\n\nThe optional `weak` attribute is a boolean denoting whether the framework should be weakly-linked. Default is `false`.\n\nIf the file specified by `src` does not exist, the tool should stop/reverse the installation process, warn the user, and exit with a non-zero code.\n\n### &lt;dependencies&gt; and &lt;dependency&gt;\n\nIdentifies dependency of the plugin on another plugin.\n\nExample:\n\n    <dependencies>\n        <dependency name=\"com.facebook.plugin\" url=\"http://plugins.cordova.io\" />\n        <dependency name=\"com.adobe.omniture\" url=\"http://plugins.phonegap.com\" version=\"1.0.0\" />\n    </dependencies>\n\nDependencies denote other plugins that must be installed in order for the current plugin to work properly.\n\nTwo different versions of the same plugin cannot be installed into the same application. If the user attempts to do so, the tooling should error out appropriately and exit with a non-zero code.\n\nDependent plugins should be fetched first and stored in the user's specified plugins directory (or the default enforced by the tool if none is specified). These plugins are then installed into the user's cordova project, one by one, in a recursive fashion.\nIf installation of any dependent plugin is not successful, the tool should not proceed with installation of the parent plugin and reverse all changes made to the cordova project by the installation.\n\n#### name\n\nA reverse-style domain identifier, as specified by a plugin in the top-level `plugin` element's `id` attribute.\n\n#### url\n\nURL pointing to a valid cordova plugin \"universe.\"\n\nThe tooling should retrieve plugin contents based on a combination of this URL and the `name` attribute, i.e. `url` + '/' + `name`.\n\nIf the retrieval URL does not resolve or does not contain a valid plugin.xml file, the tool should error out and exit with a non-zero code.\n\n#### version\n\nOptionally you can specify a version requirement for the plugin dependency. Identical syntax for the `&lt;engine&gt;` element's `version` attribute above should be employed. \n\n### &lt;info&gt;\n\nThe tool will provide additional information to users. This is useful when you require some extra steps that can't be easily automated or are out of the scope of plugman.\n\nExamples:\n\n<info>\nYou need to install **Google Play Services** from the `Android Extras` section using the Android SDK manager (run `android`).\n\nYou need to add the following line to your `local.properties`\n    \nandroid.library.reference.1=PATH_TO_ANDROID_SDK/sdk/extras/google/google_play_services/libproject/google-play-services_lib\n</info>\n\n## Variables\n\nIn certain cases, a plugin may need to make configuration changes dependent on\nthe target application. For example, to register for C2DM on Android, an app\nwith package id `com.alunny.message` would need a permission like:\n\n    <uses-permission\n    android:name=\"com.alunny.message.permission.C2D_MESSAGE\"/>\n\nIn cases like this (where the content inserted from the `plugin.xml` file is\nnot known ahead of time), variables can be indicated by a dollar-sign and a\nseries of capital letters, digits and underscores. For the above example, the\n`plugin.xml` file would include this tag:\n\n    <uses-permission\n    android:name=\"$PACKAGE_NAME.permission.C2D_MESSAGE\"/>\n\nplugman replaces variable references with the\ncorrect value, if specified, or the empty string otherwise. The value of the\nvariable reference may be detected (in this case, from the `AndroidManifest.xml`\nfile), or specified by the user of the tool; the exact process is dependent on\nthe particular tool.\n\nplugman can request users to specify variables required by a plugin. For example API keys for C2M and Google Maps can be specified as a command line argument like so:\n\n    plugman --platform ios|android --project /path/to/project --plugin name|git-url|path --variable API_KEY=\"!@CFATGWE%^WGSFDGSDFW$%^#$%YTHGsdfhsfhyer56734\"\n\nA preference tag will need to be present inside the platform tag to make the variable mandatory like so:\n\n    <preference name=\"API_KEY\" />\n\nplugman should check that these required preferences are passed in, and if not, should warn the user on how to pass the variable in and exit with a non-zero code.\n\nCertain variable names should be reserved - these are listed below.\n\n### $PACKAGE_NAME\n\nThe reverse-domain style unique identifier for the package - corresponding to\nthe `CFBundleIdentifier` on iOS or the `package` attribute of the top-level\n`manifest` element in an `AndroidManifest.xml` file.\n\n## Project Directory Structure\n\nTODO: show how the foo plugin example from above will have its files placed in a cordova project after running plugman\n\n## Authors\n\n* Andrew Lunny\n* Fil Maj\n* Mike Reinstein\n* Anis Kadri\n* Braden Shepherdson\n* Tim Kim \n\n## Contributors\n\n* Michael Brooks\n\n## License\n\nApache\n\n## TODO\n\nThese apply to plugman as well as cordova-cli. Keep the two in step, they both have `future` branches.\n\nThese are in rough order of priority, most urgent at the top.\n\n* Fix all the tests, including the www-only tests, which expect the old `www` platform that has been removed. Note that most of the tests will need some rewiring because of the separation of `--fetch` and `--install`. [CB-2814](http://issues.cordova.io/2814). Assigned to Tim.\n* Implement a `cordova watch` a la `grunt watch` that will re-run `cordova prepare` every time the installed plugins change (including those installed with `--link`). This is definitely a stretch goal, but it would be awesome. Not assigned but tracked at [CB-2819](http://issues.cordova.io/2819).\n",
  "readmeFilename": "README.md",
  "_id": "plugman@0.5.8",
  "dist": {
    "shasum": "4935de7d050d770bb52a80c536084bc7ae28e917"
  },
  "_from": "plugman@git+https://github.com/blackberry/cordova-plugman.git#blackberry10"
}
